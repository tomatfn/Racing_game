require 'ruby2d'

set width: 1920
set height: 1080
set background: '#066b46'

## H칛r skapas en klass som f친r olika attribut
class Player
  attr_accessor :x, :y, :speed, :image, :rotation

## H칛r f친r spelarna en bredd, en h칬jd, en bild och positioner. H칛r f칬rklaras 칛ven rotationen som bilen har fr친n b칬rjan och starthastigheten.
  def initialize(image_path, x, y, road_rectangles, road_circles, mountain)
    @image = Image.new(image_path, width: 50, height: 100, x: x, y: y)
    @rotation = 270
    @image.rotate = @rotation
    @speed = 0
    @road_rectangles = road_rectangles
    @road_circles = road_circles
    @mountain = mountain
  end

#H칛r 칛r funktionen som f친r bilarna att r칬ra p친 sig. Med en matematisk formel ber칛knas rotationen p친 bilen vilket blir sv칛ngningen p친 bilen. Bilen tilldelas nya x och y v칛rden via denna funktion.
  def move
    angle_in_radians = @rotation * Math::PI / 180
    new_x = @image.x + Math.sin(angle_in_radians) * @speed
    new_y = @image.y - Math.cos(angle_in_radians) * @speed
 
    # H칛r kollas det om bilen 칛r i rektangeln, om den 칛r det s친 reduceras hastigheten med 0.5, vilket g칬r att det blir ett finare stopp f칬r bilen ist칛llet f칬r att den stannar direkt.
    if inside_rectangle_coords?(new_x, new_y, @mountain)
      @speed *= 0.5  # Reduce speed to simulate bounce/slam
    else
      @image.x = new_x
      @image.y = new_y
    end
  
    # Apply friction, but ensure speed doesn't go below 0
    # H칛r 칛r friktionen som g칬r att bilen inte stannar direkt, men att bilen inte kan f친 negativ hastighet d친 bilen d친 hade b칬rjat backa bak친t.
    if @speed > 0
      @speed -= 0.5
    elsif @speed < 0
      @speed += 0.5
    end
  end

# H칛r skapas funktionen som definerar accelerationen p친 bilen. H칛r s칛tts maxhastigheten. 
def accelerate(amount, max_speed = 8)
  max_speed = outside_road? ? 3 : max_speed
  @speed += amount if @speed < max_speed
end

# H칛r skapas funktionen som minskar hastigheten men att den inte kan minska med hur mycket som helst d친 vi vill att bilen ska kunna backa, men inte hur snabbt som helst. S친 h칛r s칛tts 칛ven min-hastigheten.
def decelerate(amount, min_speed = -4)
  @speed -= amount if @speed > min_speed
end

# H칛r skapas en funktion som best칛mmer om bilen kan rotera stillast친enede till v칛nster eller inte. Nu kan man sv칛nga sekunden bilen r칬r p친 sig, men st친r man helt still s친 kan man inte sv칛nga. Detta g칬r det mer realistiskt d친 en bil i verkligheten inte kan sv칛nga runt i en hel cirkel stillast친ende.
def rotate_left(amount)
  if @speed.abs >= 0.8
    if @speed > 0
      @rotation -= amount
    else
      @rotation += amount
    end
  end
  @image.rotate = @rotation
end

# Detta 칛r exakt samma kod som ovan fast att rotationen 칛r 친t h칬ger ist칛llet f칬r v칛nster som funktionen ovan var.
def rotate_right(amount)
  if @speed.abs >= 0.8 ##
    if @speed > 0
      @rotation += amount
    else
      @rotation -= amount
    end
  end
  @image.rotate = @rotation
end
  # H칛r skapas en funktion som kollar om bilarna 칛r p친 v칛gen eller inte. H칛r anv칛nds funktionerna som jag f칬rklarat ovan.
  def outside_road?
    !@road_rectangles.any? { |rect| inside_rectangle?(@image, rect) } &&
    !@road_circles.any? { |circle| inside_circle?(@image, circle) }
  end

  def inside_rectangle?(image, rect)
    image.x.between?(rect.x, rect.x + rect.width) && image.y.between?(rect.y, rect.y + rect.height)
  end

  def inside_circle?(image, circle)
    Math.sqrt((image.x - circle.x)**2 + (image.y - circle.y)**2) < circle.radius
  end
end

def inside_rectangle_coords?(x, y, rect)
  x.between?(rect.x, rect.x + rect.width) && y.between?(rect.y, rect.y + rect.height)
end




# Create road_rectangles
road_rectangles = []
road_rectangle_positions = [[250, 117, 1420, 267], [250, 697,1420, 267], [115, 250,267, 580],[1535, 250,267, 580]]
road_rectangle_positions.each do |x, y, width, height|
  road_rectangles << Rectangle.new(x: x, y: y, width: width, height: height, color: '#6d6462')
end

# Create road_circles
road_circles = []
road_circle_positions = [[250, 250,135], [1670, 830,135], [250, 830,135],[1670, 250,135]]
road_circle_positions.each do |x, y, radius|
  road_circles << Circle.new(x: x, y: y, radius: radius, color: '#6d6462')
end

# Detta 칛r blocket i mitten som man inte kan k칬ra igenom. Jag kallar den f칬r mountain.
mountain = Rectangle.new(x: 510, y: 445, width: 900, height: 190, color: 'white')
Rectangle.new(x: 515, y: 450, width: 890, height: 180, color: '#5d5756')

# Start/Finish line (you can reposition if needed)
# H칛r skapas en checkpoint, om man 친ker 칬ver checkpointen som 칛r p친 andra sidan banan s친 kan man f친 po칛ng. Annars kan man inte f친 po칛ng. Detta g칬r att man inte kan 친ka fram och tillbaka 칬ver linjen och f친 3 laps direkt.
finish_line = Rectangle.new(x: 960, y: 697, width: 10, height: 267, color: 'white')
checkpoint = Rectangle.new(x: 960, y: 117, width: 10, height: 267, color: '#6d6462')

# Lap counters
player1_laps = 0
player2_laps = 0

# Track if they've crossed already (so they can't spam laps)
player1_crossed = false
player2_crossed = false

# Winning flag
winner = nil

player1_checkpoint_reached = false
player2_checkpoint_reached = false


# Create players
player1 = Player.new('img/player2new.png', 1010, 740, road_rectangles, road_circles, mountain)
player2 = Player.new('img/player1new.png', 1010, 820, road_rectangles, road_circles, mountain)
car_rotation_speed = 3

# H칛r s친 f친r varje r칬relse en egen knapp. S친 om man tex trycker p친 "w" s친 친ker bilen framm친t.
on :key_held do |event|
  case event.key
  when 'w' then player1.accelerate(1.5, 8)
  when 's' then player1.decelerate(2, -4)
  when 'a' then player1.rotate_left(car_rotation_speed)
  when 'd' then player1.rotate_right(car_rotation_speed)

  when 'up' then player2.accelerate(1.5, 8)
  when 'down' then player2.decelerate(2, -4)
  when 'left' then player2.rotate_left(car_rotation_speed)
  when 'right' then player2.rotate_right(car_rotation_speed)
  end
end

# Detta 칛r texten som kommer upp n칛r en spelare har vunnit. Det finns tv친 varianter som kan ske, antingen vinner bl친 eller r칬d bil. H칛r best칛ms 칛ven positionerna p친 texterna.
lap_text1 = Text.new("Blue car Laps: 0", x: 50, y: 20, size: 25, color: 'white')
lap_text2 = Text.new("Red car Laps: 0", x: 50, y: 50, size: 25, color: 'white')
winner_text = Text.new("", x: 670, y: 15, size: 90, color: 'yellow')

update do
# Lap detection for player 1
# Player 1 checkpoint detection
if inside_rectangle_coords?(player1.image.x, player1.image.y, checkpoint)
  player1_checkpoint_reached = true
end

# Lap detection for player 1
if inside_rectangle_coords?(player1.image.x, player1.image.y, finish_line) && !player1_crossed && player1_checkpoint_reached
  player1_laps += 1
  player1_crossed = true
  player1_checkpoint_reached = false
  puts "Blue car Lap: #{player1_laps}"
end

# Reset crossing status if not on the finish line
unless inside_rectangle_coords?(player1.image.x, player1.image.y, finish_line)
  player1_crossed = false
end

# Lap detection for player 2
if inside_rectangle_coords?(player2.image.x, player2.image.y, checkpoint)
  player2_checkpoint_reached = true
end

# Lap detection for player 2
if inside_rectangle_coords?(player2.image.x, player2.image.y, finish_line) && !player2_crossed && player2_checkpoint_reached
  player2_laps += 1
  player2_crossed = true
  player2_checkpoint_reached = false
  puts "Red car Lap: #{player2_laps}"
end

# Reset crossing status if not on the finish line
unless inside_rectangle_coords?(player2.image.x, player2.image.y, finish_line)
  player2_crossed = false
end


  # Win check
  #H칛r kollas det om n친gon har vunnit, det vill s칛ga n칛r en spelare f친tt 3 po칛ng som inneb칛r 3 varv. Om tex bl친 bil f친r 3 po칛ng s친 kommer det upp att bl친 bil vann och vise versa.
  if winner.nil?
    if player1_laps >= 3
      winner = "Blue car"
      puts "游끠 #{winner} wins!"
    elsif player2_laps >= 3
      winner = "Red car"
      puts "游끠 #{winner} wins!"
    end
  end
  # H칛r 칛r texten som visar hur m친nga varv som man 친kt.
  lap_text1.text = "Blue car Laps: #{player1_laps}"
  lap_text2.text = "Red car Laps: #{player2_laps}"

  if winner
    winner_text.text = "#{winner} WINS!"
  end
  # Om ingen har vunnit s친 kommer det g친 att k칬ra bilarna, men n칛r man vunnit s친 kan man inte r칬ra p친 sig, men man kan snurra runt, bara f칬r att det ser roligt ut :).
  unless winner
    player1.move
    player2.move
  end

end

show

